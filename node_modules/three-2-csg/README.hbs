# What's this?
This is a converter which enables conversion of ThreeJS objects into CSG and back (it works both ways).

CSG objects created by this converter can then be manipulated via [@jscad/csg](https://www.npmjs.com/package/@jscad/csg).

This solution is based on  [ThreeCSG.js converter](https://gist.github.com/chandlerprall/1590424) by [Chandler Prall](https://github.com/chandlerprall).

## Installation

`npm i three-2-csg`

# Example
The following example is based on a [Stack overflow example](https://stackoverflow.com/questions/24716145/create-a-unique-sphere-geometry-from-a-sphere-and-a-cylinder-three-js#24720819) by [4m1r](https://stackoverflow.com/users/2296997/4m1r):
```javascript
import { toCSG, fromCSG } from 'three-2-csg';

//sphere
var sphere = new THREE.SphereGeometry(2,20,20);
var sphereMesh = new THREE.Mesh( sphere, material );
var sphereCSG = toCSG( sphereMesh ); // converting ThreeJS object to CSG

// cyl
var cylinder = new THREE.CylinderGeometry(0.5, 0.5, 5, 32 );
var cylinderMesh = new THREE.Mesh( cylinder, material );
var cylinderCSG = toCSG( cylinderMesh ); // converting ThreeJS object to CSG

//result
var subtractCSG = sphereCSG.subtract( cylinderCSG );
var result = fromCSG(subtractCSG); // converting CSG back into ThreeJS object

result.geometry.computeVertexNormals();

scene.add( result );
```

{{>main}}

# License
MIT License, [http://www.opensource.org/licenses/MIT](http://www.opensource.org/licenses/MIT)